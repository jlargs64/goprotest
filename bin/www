#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hackathon:server');
var http = require('http');
var cfenv = require("cfenv");

// load local VCAP configuration  and service credentials
var vcapLocal;
try {
  vcapLocal = require('../vcap-local.json');
  console.log("Loaded local VCAP", vcapLocal);
} catch (e) { 
  console.log(e);
}

const appEnvOpts = vcapLocal ? { vcap: vcapLocal} : {}

const appEnv = cfenv.getAppEnv(appEnvOpts);
//appEnv.services.DB2[0].credentials

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ()=>{
  //DB STUFF HERE
  console.log(`Server started on http://localhost:${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function dbSetup() {
  const connStr = `DSN=[${appEnv.services.DB2[0].credentials.DSN}];UID=[${appEnv.services.DB2[0].credentials.UID}];PWD=${appEnv.services.DB2[0].credentials.PWD}`;
  ibmdb.open(connStr, function (err, conn) {
    
    conn.prepare('CREATE TABLE BRD70630.users ( id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1), \
    full_name VARCHAR(32) NOT NULL ,email VARCHAR(32) NOT NULL ,password VARCHAR(32) NOT NULL ,profile_pic_url VARCHAR(32) ) ORGANIZE BY COLUMN', function (err, stmt) { 

      stmt.execute(function (err, affectedRowCount) { 
      }); 
  
     });

    conn.close(function (err) {
      console.log('Done'); 
    }); 
  });
}
