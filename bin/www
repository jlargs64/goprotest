#!/usr/bin/env node
require('dotenv').config();
//process.env.PWD
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hackathon:server');
var http = require('http');
var pg = require('../utils/db');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  //DB STUFF HERE
  dbSetup();
  console.log(`Server started on http://localhost:${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function dbSetup() {
  pg.schema.hasTable('users').then(function (exists) {
    if (!exists) {
      return pg.schema.createTable('users', function (t) {
        t.increments('id').primary();
        t.string('full_name', 100);
        t.string('email', 100);
        t.text('password');
        t.string('profile_pic', 100);
      });
    }
  });

  pg.schema.hasTable('protests').then(function (exists) {
    if (!exists) {
      return pg.schema.createTable('protests', function (t) {
        t.increments('id').primary();
        t.string('name', 100);
        t.text('bio');
        t.string('protest_pic_url', 100);
        t.boolean('is_public').defaultTo(true);
        t.datetime('start_time');
        t.string('address', 100);
        t.string('city', 100);
        t.string('state', 100);
        t.string('zip_code', 5);
      });
    }
  });

  pg.schema.hasTable('comments').then(function (exists) {
    if (!exists) {
      return pg.schema.createTable('comments', function (t) {
        t.increments('id').primary();
        t.text('body');
        t.integer('owner_id');
        t.integer('protest_id');
        t.datetime('time_posted').defaultTo(pg.fn.now());
      });
    }
  });

  pg.schema.hasTable('user_protest_signup').then(function (exists) {
    if (!exists) {
      return pg.schema.createTable('user_protest_signup', function (t) {
        t.increments('id').primary();
        t.integer('user_id');
        t.integer('protest_id');
        t.enu('role', ['Attendee', 'Owner']);
      });
    }
  });

  pg.schema.table('comments', function (table) {
    table.foreign('owner_id').references('users.id');
    table.foreign('protest_id').references('protests.id');
  });

  pg.schema.table('user_protest_signup', function (table) {
    table.foreign('user_id').references('users.id');
    table.foreign('protest_id').references('protests.id');
  });
}
